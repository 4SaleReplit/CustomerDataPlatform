-- PostgreSQL Database Schema for Internal Marketing Platform
-- Version 2.0 (Final)

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";

CREATE TYPE team_role AS ENUM ('admin', 'manager', 'analyst', 'viewer');
CREATE TYPE team_status AS ENUM ('active', 'inactive', 'suspended');

CREATE TYPE tile_type_enum AS ENUM ('chart', 'metric', 'table', 'funnel', 'heatmap', 'kpi_card', 'text_block');
CREATE TYPE cohort_status_enum AS ENUM ('draft', 'active', 'calculating', 'paused', 'archived', 'error');
CREATE TYPE sync_status_enum AS ENUM ('synced', 'pending', 'not_synced', 'error', 'syncing');

CREATE TYPE segment_type_enum AS ENUM ('behavioral', 'demographic', 'transactional', 'engagement', 'custom', 'rfm');
CREATE TYPE promotion_type_enum AS ENUM ('percentage', 'fixed_amount', 'bogo', 'free_shipping', 'custom_code');
CREATE TYPE promotion_status_enum AS ENUM ('draft', 'scheduled', 'active', 'paused', 'completed', 'cancelled', 'archived');

CREATE TYPE campaign_type_enum AS ENUM ('email', 'push', 'sms', 'in_app', 'upselling', 'retention', 'webhook');
CREATE TYPE campaign_channel_enum AS ENUM ('email', 'push_notification', 'sms', 'in_app_message', 'banner', 'webhook');
CREATE TYPE campaign_status_enum AS ENUM ('draft', 'pending_approval', 'approved', 'scheduled', 'active', 'paused', 'completed', 'cancelled', 'archived', 'error');

CREATE TYPE event_type_enum AS ENUM ('campaign_launch', 'campaign_end', 'promotion_start', 'promotion_end', 'meeting', 'deadline', 'milestone', 'custom_task');
CREATE TYPE event_status_enum AS ENUM ('scheduled', 'in_progress', 'completed', 'cancelled', 'postponed');

CREATE TYPE action_type_enum AS ENUM (
  'create', 'update', 'delete', 'view', 'export', 'import', 'duplicate',
  'login_success', 'login_fail', 'logout', 'password_reset_request', 'password_reset_success',
  'enable', 'disable', 'approve', 'reject',
  'activate', 'deactivate', 'pause', 'resume', 'archive', 'unarchive',
  'sync_start', 'sync_success', 'sync_fail', 'calculate_start', 'calculate_success', 'calculate_fail'
);

CREATE TYPE integration_type_enum AS ENUM ('email_service', 'analytics_platform', 'crm', 'payment_gateway', 'sms_provider', 'push_notification_service', 'data_warehouse', 'custom_api');
CREATE TYPE integration_status_enum AS ENUM ('active', 'inactive', 'error_config', 'error_auth', 'pending_setup', 'syncing');

CREATE OR REPLACE FUNCTION trigger_set_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TABLE team (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  role team_role NOT NULL DEFAULT 'analyst',
  status team_status NOT NULL DEFAULT 'active',
  permissions JSONB DEFAULT '{}',
  last_login_at TIMESTAMP WITH TIME ZONE,
  failed_login_attempts INTEGER DEFAULT 0,
  locked_until TIMESTAMP WITH TIME ZONE,
  avatar_url TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  created_by UUID REFERENCES team(id) ON DELETE SET NULL
);
CREATE TRIGGER set_timestamp_team BEFORE UPDATE ON team FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_team_email ON team(email);
CREATE INDEX idx_team_role ON team(role);
CREATE INDEX idx_team_status ON team(status);

CREATE TABLE dashboard_configurations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  team_id UUID REFERENCES team(id) ON DELETE SET NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  layout_config JSONB NOT NULL,
  is_default_for_team_role team_role NULL,
  is_template BOOLEAN DEFAULT false,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_dashboard_configurations BEFORE UPDATE ON dashboard_configurations FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_dashboard_configurations_team_id ON dashboard_configurations(team_id);
CREATE INDEX idx_dashboard_configurations_is_template ON dashboard_configurations(is_template);
CREATE UNIQUE INDEX idx_dashboard_configurations_default_role ON dashboard_configurations(is_default_for_team_role) WHERE is_default_for_team_role IS NOT NULL;

CREATE TABLE dashboard_tiles (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  tile_type tile_type_enum NOT NULL,
  default_title VARCHAR(255) NOT NULL,
  default_data_source_config JSONB NOT NULL,
  default_visualization_config JSONB DEFAULT '{}',
  description TEXT,
  is_publicly_available BOOLEAN DEFAULT true,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_dashboard_tiles BEFORE UPDATE ON dashboard_tiles FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();
CREATE INDEX idx_dashboard_tiles_type ON dashboard_tiles(tile_type);

CREATE TABLE cohorts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL UNIQUE,
  description TEXT,
  conditions JSONB NOT NULL,
  user_count INTEGER DEFAULT 0,
  status cohort_status_enum NOT NULL DEFAULT 'draft',
  sync_status sync_status_enum NOT NULL DEFAULT 'not_synced',
  calculation_query TEXT,
  last_calculated_at TIMESTAMP WITH TIME ZONE,
  calculation_error TEXT,
  auto_refresh BOOLEAN DEFAULT true,
  refresh_frequency_hours INTEGER DEFAULT 24 CHECK (refresh_frequency_hours > 0),
  next_refresh_at TIMESTAMP WITH TIME ZONE,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_cohorts BEFORE UPDATE ON cohorts FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_cohorts_name_trgm ON cohorts USING GIN (name gin_trgm_ops);
CREATE INDEX idx_cohorts_status ON cohorts(status);
CREATE INDEX idx_cohorts_sync_status ON cohorts(sync_status);
CREATE INDEX idx_cohorts_created_by ON cohorts(created_by);
CREATE INDEX idx_cohorts_auto_refresh_next_refresh ON cohorts(auto_refresh, next_refresh_at) WHERE auto_refresh = true;

CREATE TABLE cohort_memberships (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  cohort_id UUID NOT NULL REFERENCES cohorts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL, -- This user_id links to your existing 'users' table
  added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(cohort_id, user_id)
);
CREATE INDEX idx_cohort_memberships_user_id_cohort_id ON cohort_memberships(user_id, cohort_id);
CREATE INDEX idx_cm_cohort_id ON cohort_memberships(cohort_id); -- Added for queries filtering by cohort_id
CREATE INDEX idx_cm_user_id ON cohort_memberships(user_id); -- Added for queries filtering by user_id

CREATE TABLE segments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL UNIQUE,
  description TEXT,
  segment_type segment_type_enum NOT NULL,
  conditions JSONB,
  color VARCHAR(7) DEFAULT '#3B82F6',
  is_active BOOLEAN DEFAULT true,
  auto_assign BOOLEAN DEFAULT false,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_segments BEFORE UPDATE ON segments FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_segments_name_trgm ON segments USING GIN (name gin_trgm_ops);
CREATE INDEX idx_segments_type ON segments(segment_type);
CREATE INDEX idx_segments_is_active ON segments(is_active);
CREATE INDEX idx_segments_auto_assign ON segments(auto_assign) WHERE auto_assign = true;

CREATE TABLE user_segments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL, -- This user_id links to your existing 'users' table
  segment_id UUID NOT NULL REFERENCES segments(id) ON DELETE CASCADE,
  assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  assigned_by UUID REFERENCES team(id) ON DELETE SET NULL,
  assignment_method VARCHAR(50) DEFAULT 'manual' CHECK (assignment_method IN ('manual', 'automatic_rules', 'import')),
  UNIQUE(user_id, segment_id)
);
CREATE INDEX idx_user_segments_segment_id_user_id ON user_segments(segment_id, user_id);
CREATE INDEX idx_us_segment_id ON user_segments(segment_id); -- Added for queries filtering by segment_id
CREATE INDEX idx_us_user_id ON user_segments(user_id); -- Added for queries filtering by user_id

CREATE TABLE promotions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  promotion_type promotion_type_enum NOT NULL,
  target_cohort_id UUID REFERENCES cohorts(id) ON DELETE SET NULL,
  discount_config JSONB NOT NULL,
  start_date TIMESTAMP WITH TIME ZONE NOT NULL,
  end_date TIMESTAMP WITH TIME ZONE,
  status promotion_status_enum NOT NULL DEFAULT 'draft',
  budget DECIMAL(12,2),
  redemption_limit_total INTEGER,
  redemption_limit_per_user INTEGER,
  total_redemptions INTEGER DEFAULT 0,
  total_discount_given DECIMAL(12,2) DEFAULT 0.00,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_promotions BEFORE UPDATE ON promotions FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_promotions_name_trgm ON promotions USING GIN (name gin_trgm_ops);
CREATE INDEX idx_promotions_status ON promotions(status);
CREATE INDEX idx_promotions_target_cohort_id ON promotions(target_cohort_id);
CREATE INDEX idx_promotions_type ON promotions(promotion_type);
CREATE INDEX idx_promotions_start_end_date ON promotions(start_date, end_date);

CREATE TABLE campaigns (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  campaign_type campaign_type_enum NOT NULL,
  target_cohort_id UUID REFERENCES cohorts(id) ON DELETE SET NULL,
  channel campaign_channel_enum NOT NULL,
  promotion_id UUID REFERENCES promotions(id) ON DELETE SET NULL,
  content JSONB NOT NULL,
  schedule_config JSONB,
  status campaign_status_enum NOT NULL DEFAULT 'draft',
  total_sent INTEGER DEFAULT 0,
  total_opened INTEGER DEFAULT 0,
  total_clicked INTEGER DEFAULT 0,
  total_converted INTEGER DEFAULT 0,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_campaigns BEFORE UPDATE ON campaigns FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_campaigns_name_trgm ON campaigns USING GIN (name gin_trgm_ops);
CREATE INDEX idx_campaigns_status ON campaigns(status);
CREATE INDEX idx_campaigns_target_cohort_id ON campaigns(target_cohort_id);
CREATE INDEX idx_campaigns_type ON campaigns(campaign_type);
CREATE INDEX idx_campaigns_channel ON campaigns(channel);
CREATE INDEX idx_campaigns_promotion_id ON campaigns(promotion_id);

CREATE TABLE calendar_events (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  title VARCHAR(255) NOT NULL,
  description TEXT,
  event_type event_type_enum NOT NULL,
  related_entity_id UUID,
  related_entity_type VARCHAR(50),
  start_at TIMESTAMP WITH TIME ZONE NOT NULL,
  end_at TIMESTAMP WITH TIME ZONE,
  all_day BOOLEAN DEFAULT false,
  status event_status_enum NOT NULL DEFAULT 'scheduled',
  color VARCHAR(7) DEFAULT '#3B82F6',
  assigned_to_team_id UUID REFERENCES team(id) ON DELETE SET NULL,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_calendar_events BEFORE UPDATE ON calendar_events FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_calendar_events_start_at ON calendar_events(start_at);
CREATE INDEX idx_calendar_events_end_at ON calendar_events(end_at);
CREATE INDEX idx_calendar_events_event_type ON calendar_events(event_type);
CREATE INDEX idx_calendar_events_assigned_to ON calendar_events(assigned_to_team_id);
CREATE INDEX idx_calendar_events_related_entity ON calendar_events(related_entity_type, related_entity_id);

CREATE TABLE activity_logs (
  id BIGSERIAL PRIMARY KEY,
  actor_id UUID REFERENCES team(id) ON DELETE SET NULL,
  actor_email VARCHAR(255),
  action action_type_enum NOT NULL,
  entity_type VARCHAR(100) NOT NULL,
  entity_id UUID,
  entity_name VARCHAR(255),
  details JSONB DEFAULT '{}',
  ip_address INET,
  user_agent TEXT,
  status VARCHAR(20) DEFAULT 'success' CHECK (status IN ('success', 'failure')),
  failure_reason TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE INDEX idx_activity_logs_actor_id ON activity_logs(actor_id);
CREATE INDEX idx_activity_logs_created_at_desc ON activity_logs(created_at DESC);
CREATE INDEX idx_activity_logs_entity_type_id ON activity_logs(entity_type, entity_id);
CREATE INDEX idx_activity_logs_action ON activity_logs(action);

CREATE TABLE integrations (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL UNIQUE,
  integration_type integration_type_enum NOT NULL,
  provider VARCHAR(100) NOT NULL,
  status integration_status_enum NOT NULL DEFAULT 'pending_setup',
  configuration_encrypted TEXT NOT NULL,
  metadata JSONB DEFAULT '{}',
  last_sync_at TIMESTAMP WITH TIME ZONE,
  last_sync_status sync_status_enum,
  last_sync_message TEXT,
  sync_frequency_minutes INTEGER DEFAULT 60 CHECK (sync_frequency_minutes > 0),
  next_sync_at TIMESTAMP WITH TIME ZONE,
  error_count INTEGER DEFAULT 0,
  last_error_details TEXT,
  created_by UUID REFERENCES team(id) ON DELETE SET NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
CREATE TRIGGER set_timestamp_integrations BEFORE UPDATE ON integrations FOR EACH ROW EXECUTE FUNCTION trigger_set_timestamp();

CREATE INDEX idx_integrations_name ON integrations(name);
CREATE INDEX idx_integrations_type_provider ON integrations(integration_type, provider);
CREATE INDEX idx_integrations_status ON integrations(status);
CREATE INDEX idx_integrations_next_sync_at ON integrations(next_sync_at) WHERE status = 'active';
