# Multi-stage production Dockerfile for Customer Data Platform
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ cairo-dev jpeg-dev pango-dev giflib-dev

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (including dev dependencies for building)
RUN npm ci --silent

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install runtime dependencies
RUN apk add --no-cache \
    wget \
    dumb-init \
    cairo \
    jpeg \
    pango \
    giflib \
    fontconfig \
    ttf-dejavu

# Create app user
RUN addgroup -g 1001 -S cdp && \
    adduser -S cdp -u 1001

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install only production dependencies
RUN npm ci --only=production --silent && \
    npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=cdp:cdp /app/dist ./dist
COPY --from=builder --chown=cdp:cdp /app/client/dist ./dist/public
COPY --chown=cdp:cdp shared ./shared

# Create necessary directories
RUN mkdir -p uploads logs && \
    chown -R cdp:cdp uploads logs

# Switch to non-root user
USER cdp

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD wget -q --spider http://localhost:5000/health || exit 1

# Start application
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/index.js"] 