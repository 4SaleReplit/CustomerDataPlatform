# Unified Dockerfile - Frontend + Backend in single container (ARM64)
FROM --platform=linux/arm64 node:18-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++ curl

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install all dependencies
RUN npm ci --production=false

# Copy source code
COPY client/ ./client/
COPY server/ ./server/
COPY shared/ ./shared/

# Build frontend
RUN cd client && npm run build

# Build backend TypeScript
RUN npm run build

# Production stage - ARM64 optimized
FROM --platform=linux/arm64 node:18-alpine

# Install production dependencies and nginx
RUN apk add --no-cache nginx curl

# Set working directory
WORKDIR /app

# Copy package files and install production dependencies
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built backend
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/shared ./shared

# Copy built frontend to nginx directory
COPY --from=builder /app/client/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx-unified.conf /etc/nginx/nginx.conf

# Create uploads directory
RUN mkdir -p /app/uploads && chmod 755 /app/uploads

# Create non-root user for Node.js process
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001

# Create nginx directories and set permissions
RUN mkdir -p /var/log/nginx /var/cache/nginx /var/run/nginx && \
    chown -R nginx:nginx /var/log/nginx /var/cache/nginx /var/run/nginx /usr/share/nginx/html

# Copy startup script
COPY start-unified.sh /start-unified.sh
RUN chmod +x /start-unified.sh

# Expose ports
EXPOSE 80 5000

# Health check for both services
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost/ && curl -f http://localhost:5000/api/health || exit 1

# Start both frontend and backend
CMD ["/start-unified.sh"]