version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
      platforms:
        - linux/arm64
    container_name: cdp-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - PGHOST=${PGHOST}
      - PGPORT=${PGPORT}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - AWS_REGION=${AWS_REGION:-us-west-2}
      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
      - SNOWFLAKE_USERNAME=${SNOWFLAKE_USERNAME}
      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
      - AMPLITUDE_API_KEY=${AMPLITUDE_API_KEY}
      - BRAZE_API_KEY=${BRAZE_API_KEY}
      - BRAZE_REST_ENDPOINT=${BRAZE_REST_ENDPOINT}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - cdp_network
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  redis:
    image: redis:7-alpine
    container_name: cdp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cdp_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: cdp-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${PGDATABASE:-cdp_db}
      - POSTGRES_USER=${PGUSER:-cdp_user}
      - POSTGRES_PASSWORD=${PGPASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - cdp_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PGUSER:-cdp_user} -d ${PGDATABASE:-cdp_db}"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  app_uploads:
    driver: local
  app_logs:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  cdp_network:
    driver: bridge